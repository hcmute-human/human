// <auto-generated />
using System;
using Human.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Human.WebServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Human.Domain.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Human.Domain.Models.DepartmentPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentPositions");
                });

            modelBuilder.Entity("Human.Domain.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<Instant>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Human.Domain.Models.EmployeePosition", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentPositionId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.Property<Instant>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("EmployeeId", "DepartmentPositionId");

                    b.HasIndex("DepartmentPositionId");

                    b.ToTable("EmployeePositions");
                });

            modelBuilder.Entity("Human.Domain.Models.LeaveApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Description")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Instant>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IssuerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LeaveTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProcessorId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.HasIndex("IssuerId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("ProcessorId");

                    b.ToTable("LeaveApplications");
                });

            modelBuilder.Entity("Human.Domain.Models.LeaveType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.ToTable("LeaveTypes");
                });

            modelBuilder.Entity("Human.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(261)
                        .HasColumnType("character varying(261)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(61)
                        .HasColumnType("character varying(61)");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            CreatedTime = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Email = "admin@gmail.com",
                            PasswordHash = "$2a$11$mcRnYJiwQwnZ/h4LByaa8OlDWieeeSYr3B2DUdsXESVO7t.jWTZIC",
                            UpdatedTime = NodaTime.Instant.FromUnixTimeTicks(0L)
                        });
                });

            modelBuilder.Entity("Human.Domain.Models.UserPasswordResetToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<Instant>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Token");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPasswordResetTokens");
                });

            modelBuilder.Entity("Human.Domain.Models.UserPermission", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Permission")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("UserId", "Permission");

                    b.ToTable("UserPermissions");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "create:userPermission"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "read:userPermission"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "update:userPermission"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "delete:userPermission"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "create:department"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "read:department"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "update:department"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "delete:department"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "create:employee"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "read:employee"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "update:employee"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "delete:employee"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "create:departmentPosition"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "read:departmentPosition"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "update:departmentPosition"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "delete:departmentPosition"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "create:employeePosition"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "read:employeePosition"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "update:employeePosition"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "delete:employeePosition"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "create:leaveType"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "read:leaveType"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "update:leaveType"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "delete:leaveType"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "create:leaveApplication"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "read:leaveApplication"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "update:leaveApplication"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "delete:leaveApplication"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "apply:leaveApplication"
                        },
                        new
                        {
                            UserId = new Guid("47df33f3-f0e3-4105-ba8b-faa2f6fb126f"),
                            Permission = "process:leaveApplication"
                        });
                });

            modelBuilder.Entity("Human.Domain.Models.UserRefreshToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Token")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("ExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "Token");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("Human.Domain.Models.DepartmentPosition", b =>
                {
                    b.HasOne("Human.Domain.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Human.Domain.Models.Employee", b =>
                {
                    b.HasOne("Human.Domain.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("Human.Domain.Models.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Human.Domain.Models.EmployeePosition", b =>
                {
                    b.HasOne("Human.Domain.Models.DepartmentPosition", "DepartmentPosition")
                        .WithMany()
                        .HasForeignKey("DepartmentPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Human.Domain.Models.Employee", "Employee")
                        .WithMany("Positions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentPosition");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Human.Domain.Models.LeaveApplication", b =>
                {
                    b.HasOne("Human.Domain.Models.Employee", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Human.Domain.Models.LeaveType", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Human.Domain.Models.Employee", "Processor")
                        .WithMany()
                        .HasForeignKey("ProcessorId");

                    b.Navigation("Issuer");

                    b.Navigation("LeaveType");

                    b.Navigation("Processor");
                });

            modelBuilder.Entity("Human.Domain.Models.UserPasswordResetToken", b =>
                {
                    b.HasOne("Human.Domain.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("Human.Domain.Models.UserPasswordResetToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Human.Domain.Models.UserPermission", b =>
                {
                    b.HasOne("Human.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Human.Domain.Models.UserRefreshToken", b =>
                {
                    b.HasOne("Human.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Human.Domain.Models.Employee", b =>
                {
                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
