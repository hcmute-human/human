// <auto-generated />
using System;
using Human.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Human.WebServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Human.Domain.Models.Choice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Human.Domain.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Human.Domain.Models.DepartmentPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentPositions");
                });

            modelBuilder.Entity("Human.Domain.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<Instant>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Human.Domain.Models.EmployeePosition", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentPositionId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<Instant>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.Property<Instant>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("EmployeeId", "DepartmentPositionId");

                    b.HasIndex("DepartmentPositionId");

                    b.ToTable("EmployeePositions");
                });

            modelBuilder.Entity("Human.Domain.Models.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<Instant>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Instant>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("Human.Domain.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PositionId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Human.Domain.Models.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobId");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("Human.Domain.Models.LeaveApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Description")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Instant>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IssuerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LeaveTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProcessorId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.HasIndex("IssuerId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("ProcessorId");

                    b.ToTable("LeaveApplications");
                });

            modelBuilder.Entity("Human.Domain.Models.LeaveType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.ToTable("LeaveTypes");
                });

            modelBuilder.Entity("Human.Domain.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Human.Domain.Models.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("JobId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Human.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(261)
                        .HasColumnType("character varying(261)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(61)
                        .HasColumnType("character varying(61)");

                    b.Property<Instant>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("current_timestamp");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            CreatedTime = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Email = "admin@gmail.com",
                            PasswordHash = "$2a$11$4XKW1SK4sqRG20ia.o7/0us84OAfktyfds56h4a3VudHOxuoFTg0u",
                            UpdatedTime = NodaTime.Instant.FromUnixTimeTicks(0L)
                        });
                });

            modelBuilder.Entity("Human.Domain.Models.UserPasswordResetToken", b =>
                {
                    b.Property<string>("Token")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<Instant>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Token");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPasswordResetTokens");
                });

            modelBuilder.Entity("Human.Domain.Models.UserPermission", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Permission")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("UserId", "Permission");

                    b.ToTable("UserPermissions");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "create:user"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "read:user"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "update:user"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "delete:user"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "create:userPermission"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "read:userPermission"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "update:userPermission"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "delete:userPermission"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "create:department"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "read:department"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "update:department"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "delete:department"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "create:employee"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "read:employee"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "update:employee"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "delete:employee"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "create:departmentPosition"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "read:departmentPosition"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "update:departmentPosition"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "delete:departmentPosition"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "create:employeePosition"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "read:employeePosition"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "update:employeePosition"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "delete:employeePosition"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "create:leaveType"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "read:leaveType"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "update:leaveType"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "delete:leaveType"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "create:leaveApplication"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "read:leaveApplication"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "update:leaveApplication"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "delete:leaveApplication"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "apply:leaveApplication"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "process:leaveApplication"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "create:holiday"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "read:holiday"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "update:holiday"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "delete:holiday"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "create:job"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "read:job"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "update:job"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "delete:job"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "create:test"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "read:test"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "update:test"
                        },
                        new
                        {
                            UserId = new Guid("8fb8797f-cb7c-4997-a7e2-6e5502f4261b"),
                            Permission = "delete:test"
                        });
                });

            modelBuilder.Entity("Human.Domain.Models.UserRefreshToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Token")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("ExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "Token");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("Human.Domain.Models.AssetChoice", b =>
                {
                    b.HasBaseType("Human.Domain.Models.Choice");

                    b.ToTable("AssetChoice");
                });

            modelBuilder.Entity("Human.Domain.Models.TextChoice", b =>
                {
                    b.HasBaseType("Human.Domain.Models.Choice");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("TextChoice");
                });

            modelBuilder.Entity("Human.Domain.Models.Choice", b =>
                {
                    b.HasOne("Human.Domain.Models.Question", "Question")
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Human.Domain.Models.DepartmentPosition", b =>
                {
                    b.HasOne("Human.Domain.Models.Department", "Department")
                        .WithMany("Positions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Human.Domain.Models.Employee", b =>
                {
                    b.HasOne("Human.Domain.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("Human.Domain.Models.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Human.Domain.Models.EmployeePosition", b =>
                {
                    b.HasOne("Human.Domain.Models.DepartmentPosition", "DepartmentPosition")
                        .WithMany("EmployeePositions")
                        .HasForeignKey("DepartmentPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Human.Domain.Models.Employee", "Employee")
                        .WithMany("Positions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentPosition");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Human.Domain.Models.Job", b =>
                {
                    b.HasOne("Human.Domain.Models.Employee", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Human.Domain.Models.DepartmentPosition", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Human.Domain.Models.JobApplication", b =>
                {
                    b.HasOne("Human.Domain.Models.User", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Human.Domain.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Human.Domain.Models.LeaveApplication", b =>
                {
                    b.HasOne("Human.Domain.Models.Employee", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Human.Domain.Models.LeaveType", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Human.Domain.Models.Employee", "Processor")
                        .WithMany()
                        .HasForeignKey("ProcessorId");

                    b.Navigation("Issuer");

                    b.Navigation("LeaveType");

                    b.Navigation("Processor");
                });

            modelBuilder.Entity("Human.Domain.Models.Question", b =>
                {
                    b.HasOne("Human.Domain.Models.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Human.Domain.Models.Test", b =>
                {
                    b.HasOne("Human.Domain.Models.Employee", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Human.Domain.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Human.Domain.Models.User", b =>
                {
                    b.OwnsOne("Human.Domain.Models.AssetInfo", "Avatar", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Format")
                                .IsRequired()
                                .HasMaxLength(12)
                                .HasColumnType("character varying(12)");

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<long>("Version")
                                .HasColumnType("bigint");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("Human.Domain.Models.UserPasswordResetToken", b =>
                {
                    b.HasOne("Human.Domain.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("Human.Domain.Models.UserPasswordResetToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Human.Domain.Models.UserPermission", b =>
                {
                    b.HasOne("Human.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Human.Domain.Models.UserRefreshToken", b =>
                {
                    b.HasOne("Human.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Human.Domain.Models.AssetChoice", b =>
                {
                    b.OwnsOne("Human.Domain.Models.AssetInfo", "Asset", b1 =>
                        {
                            b1.Property<Guid>("AssetChoiceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Format")
                                .IsRequired()
                                .HasMaxLength(12)
                                .HasColumnType("character varying(12)");

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<long>("Version")
                                .HasColumnType("bigint");

                            b1.HasKey("AssetChoiceId");

                            b1.ToTable("AssetChoice");

                            b1.WithOwner()
                                .HasForeignKey("AssetChoiceId");
                        });

                    b.Navigation("Asset")
                        .IsRequired();
                });

            modelBuilder.Entity("Human.Domain.Models.Department", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Human.Domain.Models.DepartmentPosition", b =>
                {
                    b.Navigation("EmployeePositions");
                });

            modelBuilder.Entity("Human.Domain.Models.Employee", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("Human.Domain.Models.Question", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("Human.Domain.Models.Test", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
